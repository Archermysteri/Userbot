from pyrogram import Client, filters
from pyrogram.errors import FloodWait
import time
from time import sleep
import random
import sqlite3
import os
spam = False
with sqlite3.connect("database.db") as db:

    cursor = db.cursor()

    cursor.execute("""CREATE TABLE IF NOT EXISTS id(id INTEGER PRIMARY KEY,api_id TEXT,api_hash TEXT)""")

    cursor = db.cursor()


    cursor.execute(f"""SELECT api_id FROM id WHERE id = 1 """)
    data = cursor.fetchone()
    cursor.execute(f"""SELECT api_hash FROM id WHERE id = 1  """)
    data1 = cursor.fetchone()

    if data == None:


        id = [1,input('api_id:'),input('api_hash:')]
        app = Client(
            "my_account",
            api_id=id[1],
            api_hash=id[2]
        )
        cursor.execute("""INSERT INTO id VALUES(?, ?, ?);""", id)
    else:
        k = input("–ù–∞—Ç–∏—Å–Ω—ñ—Ç—å Enter(—è–∫—â–æ —Ö–æ—á–µ—Ç–µ –∑–Ω–∏—â–∏—Ç–∏ —Å–µ—Å—ñ—é —Ç–æ –Ω–∞–ø–∏—à—ñ—Ç—å del):")
        if k == "del":
            os.remove("database.db")
            os.remove("my_account.session")
            print("–ó–∞–π–¥—ñ—Ç—å –≤ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è Telegram –≤–∏–¥–∞–ª—ñ—Ç—å —Å–µ—Å—ñ—é")

        else:
            cursor.execute(f"""SELECT api_id FROM id WHERE id = 1""")
            data = str(cursor.fetchone())
            data = data.replace('\'','')
            data = data.replace( '(', '')
            data = data.replace(')', '')
            api_id = data.replace(',', '')

            cursor.execute(f"""SELECT api_hash FROM id WHERE id = 1""")
            data = str(cursor.fetchone())
            data = data.replace('\'', '')
            data = data.replace('(', '')
            data = data.replace(')', '')
            api_hash = data.replace(',', '')




            app = Client(
                "my_account",
                api_id=api_id,
                api_hash=api_hash
            )
            print("–ù–∞–ø–∏—à—ñ—Ç—å –≤ —á–∞—Ç—ñ Telegram .help")

            delay = 0.25
            @app.on_message(filters.command("help", prefixes=".") & filters.me)
            def help(_, msg):
                orig_text='.1000-7-–ó–∞–ø—É—Å–∫–∞–µ –Ø –ì—É–ª—å\n.spam "–∞" "–ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è" - —Å–ø–∞–º–∏—Ç—å –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è–º "–∞" —Ä–∞–∑—ñ–≤ —è–∫—â–æ "–∞" –¥–æ—Ä—ñ–≤–Ω—é—î 0, —Ç–æ –Ω–µ—Å–∫—ñ–Ω—á–µ–Ω–Ω–æ —Ä–∞–∑\n.spam_list "–∞" "|–ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—è1|–ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—è2|–ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—è3|" - —Å–ø–∞–º–∏—Ç—å –¥–µ–∫—ñ–ª—å–∫–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è "–∞" —Ä–∞–∑—ñ–≤ —è–∫—â–æ "–∞" –¥–æ—Ä—ñ–≤–Ω—é—î 0, —Ç–æ –Ω–µ—Å–∫—ñ–Ω—á–µ–Ω–Ω–æ —Ä–∞–∑\n.stop - –∑—É–ø–∏–Ω—è—î —Å–ø–∞–º\n.decryption "–ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è"- –¥–µ—à–∏—Ñ—Ä—É—î –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è\n.type "–ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è" - –¥—Ä—É–∫—É—î –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è\n.hack_dupa "—á–∏—è –¥—É–ø–∞"-–∑–ª–∞–º—É—î –¥—É–ø—É'
                app.edit_message_text(
                    chat_id=msg.chat.id,
                    message_id=msg.id,
                    text=orig_text
                )

            @app.on_message(filters.command('1000-7', prefixes='.') & filters.me)
            async def gol(_, message):
                s = 0.01
                b = 1007
                await message.delete()
                await message.reply_text(f'–Ø..')
                time.sleep(2)
                await message.reply_text(f'–ì—É–ª—å')
                while not  b <7:
                    if b <= 700:
                        s = delay

                    a=b-7

                    await message.reply_text(f'{a}-7')
                    b=a
                    time.sleep(s)

            @app.on_message(filters.command('stop', prefixes='.') & filters.me)
            async def stop(_, message):
                global spam

                await message.delete()
                spam = False

            @app.on_message(filters.command('spam', prefixes='.') & filters.me)
            async def spam(_, message):
                global spam
                orig_text = str(message.text.split(".spam", maxsplit=1)[1])
                cmd = orig_text.split()
                orig_text = str(message.text.split(cmd[0], maxsplit=1)[1])

                spam = True
                a = cmd[0]
                if a.isdigit() == True:
                    await message.delete()
                    if int(cmd[0])==0:
                        while spam:
                            await message.reply_text(orig_text)
                            time.sleep(delay)
                    for i in range(int(cmd[0])):
                        if spam == True:
                            await message.reply_text(orig_text)
                            time.sleep(delay)

            @app.on_message(filters.command('spam_list', prefixes='.') & filters.me)
            async def spam_list(_, message):
                global spam
                orig_text = str(message.text.split(".spam_list", maxsplit=1)[1])
                cmd = orig_text.split()
                orig_text = str(message.text.split(cmd[0], maxsplit=1)[1])
                k= orig_text.split("|")
                orig_text_list=[]
                for i in k:
                    if i!='' and i!=" ":
                        orig_text_list.append(i)
                spam = True
                a = cmd[0]
                print(a)
                if a.isdigit() == True:
                    await message.delete()
                    if int(cmd[0])==0:
                        while spam:
                            for i in orig_text_list:
                                await message.reply_text(i)
                                time.sleep(delay)
                    for i in range(int(cmd[0])):
                        if spam == True:
                            for i in orig_text_list:
                                await message.reply_text(i)
                                time.sleep(delay)


            @app.on_message(filters.command("decryption", prefixes=".") & filters.me)
            def decryption(_, msg):

                orig_text = msg.text.split(".decryption", maxsplit=1)[1]

                mesage =''
                A = ['–∞', '–±', '–≤', '–≥', '“ë', '–¥', '–µ', '—î', '–∂', '–∑', '–∏', '—ñ', '—ó', '–π', '–∫', '–ª', '–º', '–Ω', '–æ', '–ø', '—Ä', '—Å',
                     '—Ç', '—É', '—Ñ', '—Ö', '—Ü', '—á', '—à', '—â', '—å', '—é', '—è', '–ê', '–ë', '–í', '–ì', '“ê', '–î', '–ï', '–Ñ', '–ñ', '–ó', '–ò',
                     '–Ü', '–á', '–ô', '–ö', '–õ', '–ú', '–ù', '–û', '–ü', '–†', '–°', '–¢', '–£', '–§', '–•', '–¶', '–ß', '–®', '–©', '–¨', '–Æ', '–Ø',
                     'A', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J', 'K', 'L', 'M', 'N', 'O', 'P', 'Q', 'R', 'S', 'T', 'U', 'V', 'W',
                     'X', 'Y', 'Z', 'a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r', 's',
                     't', 'u', 'v', 'w', 'x', 'y', 'z', '1', '2', '3', '4', '5', '6', '7', '8', '9', '0', '!', '"', '#', '$', '%',
                     '&', "'", '(', ')', '*', '+', ',', '-', '.', '/', ':', ';', '<', '=', '>', '?', '@', '[', ']', '^', '_', '`',
                     '{', '|', '}', '~', '\\']

                for ii in orig_text:
                    c = random.randint(5,10)
                    a_old=''
                    for i in range(c):



                        a_nue =random.choice(A)

                        if not a_nue == a_old and not a_nue == ii :

                            app.edit_message_text(
                                chat_id=msg.chat.id,
                                message_id=msg.id,
                                text=f'{mesage}{a_nue}'
                            )
                            a_old = a_nue
                        time.sleep(0.16)


                    mesage += ii
                    time.sleep(0.16)
                app.edit_message_text(
                    chat_id=msg.chat.id,
                    message_id=msg.id,
                    text=f'{mesage}'
                )




            @app.on_message(filters.command("type", prefixes=".") & filters.me)
            def type(_, msg):
                orig_text = msg.text.split(".type ", maxsplit=1)[1]
                text = orig_text
                tbp = ""
                typing_symbol = "‚ñí"

                while (tbp != orig_text):
                    try:
                        msg.edit(tbp + typing_symbol)
                        sleep(0.05)  # 50 ms

                        tbp = tbp + text[0]
                        text = text[1:]

                        msg.edit(tbp)
                        sleep(0.05)

                    except FloodWait as e:
                        sleep(e.x)
            @app.on_message(filters.command("hack_dupa", prefixes=".") & filters.me)
            def hack_dupa(_, msg):
                orig_text = msg.text.split(".hack_dupa", maxsplit=1)[1]
                perc = 0

                while (perc < 100):
                    try:
                        text = f"‚Äçüíª‚Äç–í–∑–ª–æ–º –î—É–ø–∏  {orig_text} –≤ –≤ –ø—Ä–æ—Ü–µ—Å—ñ ..." + str(perc) + "%"
                        msg.edit(text)

                        perc += random.randint(1, 3)
                        sleep(0.1)

                    except FloodWait as e:
                        sleep(e.x)

                msg.edit(f"üü¢ –î—É–ø–∞ {orig_text} —É—Å–ø—ñ—à–Ω–æ –∑–ª–∞–º–∞–Ω–∞!")
                sleep(3)

                msg.edit("üîû –ü–æ—à—É–∫ –ø–æ—Ä–Ω—É—Ö–∏")
                perc = 0

                while (perc < 100):
                    try:
                        text = "üîû –ü–æ—à—É–∫ –ø–æ—Ä–Ω—É—Ö–∏ ..." + str(perc) + "%"
                        msg.edit(text)

                        perc += random.randint(1, 5)
                        sleep(0.15)

                    except FloodWait as e:
                        sleep(e.x)

                msg.edit("üîû –ó–Ω–∞–π–¥–µ–Ω–æ –¥–æ—Ö—É—è –≥–µ–π –ø–æ—Ä–Ω–æ —Å–µ—Ä–µ–¥ –Ω–∏—Ö:\n–ì–µ–π –ø–æ—Ä–Ω–æ –∑ –º–∞–≤–ø–∞–º–∏\n–ì–µ–π –ø–æ—Ä–Ω–æ –ª—É–Ω—Ç–∏–∫\n–ì–µ–π –ø–æ—Ä–Ω–æ —Å–º–µ—à–∞—Ä–∏–∫–∏\n–ì–µ–π –ø–æ—Ä–Ω–æ –∑ ‚ôÇDungeon Master‚ôÇ")






            app.run()
